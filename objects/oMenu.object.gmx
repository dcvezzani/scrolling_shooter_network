<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Server = -1;//instance_create(0,0,oServer);
global.connectip="127.0.0.1";
global.InitObject = id;
global.haveserver = false;
global.ServerType = network_socket_tcp;
global.PlayerTotal=0;
global.BaddieCount = 0;

global.listzero = ds_list_create();     // we dont want to use index 0! (maps return 0 on error)
global.mapzero = ds_map_create();       // we dont want to use index 0! (maps return 0 on error)
global.serverlist = ds_list_create();
global.servernames = ds_list_create();

// Create a server and listen on our broadcast port....
global.broadcast_server = network_create_server( network_socket_udp, 6511, 100 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game - local client+server
var i = iServerName;
global.ServerName = i.Text;
global.Server = instance_create(0,0,oServer);
if( global.haveserver == false ){
    show_debug_message("Cant create server");
}else{
    global.connectip="127.0.0.1";
    network_destroy(global.broadcast_server);
    global.broadcast_server = -1;
    show_debug_message("#######################################");
    show_debug_message("Start game");
    show_debug_message("#######################################");
    room_goto(rm_MainGame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game - connect to a remote server
var i = iServerName;
global.ServerName = i.Text;

network_destroy(global.broadcast_server);
global.broadcast_server = -1;


show_debug_message("#######################################");
show_debug_message("Next room");
show_debug_message("#######################################");
room_goto(rm_MainGame);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect clicking on server list

var yindex = 40;
var count = ds_list_size(global.serverlist);
if( mouse_y&gt;40 &amp;&amp; mouse_y&lt;(40+(count*30)) ){
    var picked = floor(((mouse_y-40)/30) );
    global.connectip = ds_list_find_value(global.serverlist, picked );
    alarm[0] = 2;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UDP server code - Detect servers "broadcast"

var eventid = ds_map_find_value(async_load, "id");

if( eventid == global.broadcast_server )
{
    var ip = ds_map_find_value(async_load, "ip");

    // incoming data for the server from a connected saocket
    var buff = ds_map_find_value(async_load, "buffer");
    name = buffer_read(buff, buffer_string );

        
    // Add to our list...if we don't already have it!
    var index = ds_list_find_index(global.serverlist, ip);
    if( index&lt;0 ){
        ds_list_add(global.serverlist, ip);
        ds_list_add(global.servernames, name);
        show_debug_message("New server found at: "+ip+"   called: "+name);
    }    
    
} 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw server list
draw_set_font(font0);
draw_set_color(c_black);
draw_text(10,10,"Select server");
draw_line(10,30, room_width-10,30);

var yindex = 40;
var count = ds_list_size(global.serverlist);
for(var i=0;i&lt;count;i++){
    draw_text(10,yindex, ds_list_find_value(global.serverlist, i)+"  "+ds_list_find_value(global.servernames, i)+"'s server" );
    yindex+=30;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
